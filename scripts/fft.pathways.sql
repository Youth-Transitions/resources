
-- This script uses the fft.ilr_aims table; the fft.ilr_aims.sql script should
-- be run to completion before this script is executed.

-- You will also need to injest and load the fft.qrd table.

-- NB: if you are trying to replicate the original project, we also included
-- PLAMS data in the pathways calculation; results generated by this script wil
-- differ as a consequence.

-------------------------------------------------------------------------------

-- Pathways are calculated three times per year. You can adjust the range of
-- dates to include in pathways using these arguments or leave null to
-- calculate pathways for all dates covered by source.
declare @min_date date = null;
declare @max_date date = null;

-- We include use a window centred on the date of interest to allow for some
-- volatility in the data. This argument defines the number of days either side
-- of the date to include (the window will be twice this value).
declare @fuzzy_days int = 7;

-- If re-entrant mode is enabled, the script will attempt to pick up where it
-- was up to in the event of partial completion; it will clear out any existing
-- table and start from scratch otherwise.
declare @reentrant_mode bit = 1;

-------------------------------------------------------------------------------

if object_id('fft.pathway_type') is null
begin
	create table fft.pathway_type (
		type_id tinyint not null primary key,
		description varchar(256) not null
		);
	insert fft.pathway_type
	select 1, 'Level 4+'
	union select 11, 'Level 3 Apprenticeship'
	union select 12, 'A-levels'
	union select 13, 'Level 3 Diploma'
	union select 14, 'Level 3 BTEC/OCR or T-levels'
	union select 15, 'Level 3 NVQ'
	union select 16, 'Mixed level 3'
	union select 17, 'Other full level 3'

	union select 20, 'Mixed level 2/3'
	union select 21, 'Partial level 2/3'
	union select 22, 'Partial level 3'

	union select 31, 'Level 2 apprenticeship'
	union select 32, 'Traineeship'
	union select 33, 'Level 2 Diploma'
	union select 34, 'Level 2 NVQ'
	union select 35, 'Other full level 2'

	union select 41, 'Partial level 2'
	union select 42, 'Below level 2'
	;
	insert fft.pathway_type values (0, 'Unknown');
end;

if object_id('fft.pathways') is null
create table fft.pathways (
	fft_person_id int not null,
	pupil_matching_reference char(18) not null /* collate Latin1_General_BIN */,
	"date" date not null,
	upin_anon binary(16),
	ukprn_anon binary(16),
	type_id tinyint not null,
	ssa_tier2 char(4) not null,
	is_composite bit not null,
	is_framework bit not null,
	is_standard bit not null,
	has_sfl_english bit not null,
	has_sfl_maths bit not null,
	level tinyint not null,
	is_completed bit not null,
	is_achieved bit not null,
	length_of_study smallint not null,
	primary key (fft_person_id, "date")
	);
else if @reentrant_mode = 0
	truncate table fft.pathways;

if @min_date is null
	select @min_date = min(start_date)
	from fft.ilr_aims
	where year(start_date) > 2002
	;
set @max_date = isnull(@max_date, getdate());

if @reentrant_mode = 1
	select @min_date = isnull(max("date"), @min_date)
	from fft.pathways
	where "date" > @min_date
	;

declare @dates table ( "date" date not null primary key );
with m as (
	select m = '01' -- January
	union all select '05' -- May
	union all select '10' -- October
	),
	d as (
	select d = cast(cast(year(@min_date) as varchar(max)) + '-' + m + '-01' as date)
	from m
	union all select dateadd(year, 1, d)
	from d
	where year(d) < year(@max_date)
	)
insert @dates
select
	dateadd(day, 15 + (11 - datepart(dw, d)) % 7, d)
from d
where
	dateadd(day, 15 + (11 - datepart(dw, d)) % 7, d)
		between @min_date and @max_date
;

declare @ilr_polyfill table (
	aim_id char(8) collate Latin1_General_BIN not null primary key,
	level2_width real not null,
	level3_width real not null
	);
insert @ilr_polyfill
select
	aim_id,
	isnull(avg(case when level2_width > 0e then level2_width end), 0e),
	isnull(avg(case when level3_width > 0e then level3_width end), 0e)
from
	fft.ilr_aims
where
	level2_width > 0e
	or level3_width > 0e
group by
	aim_id
;

declare @lars table (
	aim_id char(8) collate Latin1_General_BIN not null,
	year smallint not null,
	qual_type char(4) collate Latin1_General_BIN,
	btec bit not null,
	primary key (aim_id, year)
	);

insert @lars
select
	LearnAimRef,
	right(AcademicYear, 4),
	case max(nullif(QualType, '')) when min(nullif(QualType,'')) then max(nullif(QualType, '')) end,
	isnull(max(case
		when AimTitle like '%BTEC%' then 1
		when AimTitle collate Latin1_General_CS_AS like '%OCR%' then 1
	end), 0)
from
	LILR_i2."<project number>".lars
group by
	LearnAimRef,
	right(AcademicYear, 4)
;

insert @lars
select
	aim_id,
	year,
	qual_type,
	btec
from
	(select distinct aim_id from @lars) a
	cross join (select distinct year from fft.ilr_aims) y
	outer apply (
		select top 1
			qual_type,
			btec
		from @lars
		where
			aim_id = a.aim_id
		order by
			abs(year - y.year)
		) q
where
	not exists (
		select *
		from @lars
		where
			aim_id = a.aim_id
			and year = y.year
		)
;

declare @date date = (select min("date") from @dates);
if @@rowcount = 0
	return;

declare @id int = (
	select isnull(max(fft_person_id), 0)
	from fft.pathways
	where "date" = @date
	);
declare @max_id int = (select max(fft_person_id) from fft.person_lookup);

-- The batch size here was selected based on server performance and expected
-- record counts during testing; some experimentation may be required if
-- script performance is low. Note that even when performance is not low, with
-- existing SRS hardware, the script can still take up to 2-3 days to complete,
-- depending on how many years of pathways are being calculated.
declare @batch_size int = 11e6;

while 1 = 1
begin
	set @min_date = dateadd(d, -@fuzzy_days, @date);
	set @max_date = dateadd(d, @fuzzy_days, @date);

	with ilr_aims as (
		select
			fft_person_id,
			pupil_matching_reference,
			ukprn_anon,
			upin_anon,
			start_date,
			end_date = isnull(end_date2, expected_end_date),
			level,
			is_completed = case completion_status when 2 then 1 else 0 end,
			is_achieved = case
				when achievement_date != '1900-01-01' then 1
				when outcome in (1,2,6,7) then 1
				else 0
			end,
			is_umbrella = case ilr_aims.aim_id when 'ZPROG001' then 1 else 0 end,
			ssa_tier2 = case ssa_tier2 when '-1' then '' else ssa_tier2 end,
			framework_apprenticeship = case when programme_type in (2,3,10,20,21,22,23) then 1 else 0 end,
			standard_apprenticeship = case programme_type when 25 then 1 else 0 end,
			traineeship = case programme_type when 24 then 1 else 0 end,
			diploma = isnull(diploma, case when programme_type in (15,16,17,18) then 1 else 0 end),
			a_level = isnull(a_level, case when lars.qual_type in ('0001', '0002', '1413', '1430', '1431', '1432', '1433', '1434', '1435', '1453') then 1 else 0 end),
			btec = coalesce(qrd.btec|ocr, lars.btec, 0),
			sfl_english = case sfl_type when '1' then 1 else 0 end,
			sfl_maths = case sfl_type when '2' then 1 else 0 end,
			nvq = isnull(nvq, case when lars.qual_type = '0036' then 1 else 0 end),
			gcse = isnull(gcse, case when lars.qual_type in ('0003', '2999') then 1 else 0 end),
			self_development = isnull(self_development, case when ssa_tier2 = '14.1' then 1 else 0 end),
			general = isnull(general, case when lars.qual_type in ('1442', '1443', '1444', '1445', '1446', '1447') then 1 else 0 end),
			weight = case potential_level
				when 2 then isnull(nullif(ilr_aims.level2_width, 0e), w.level2_width)
				when 3 then isnull(nullif(ilr_aims.level3_width, 0e), w.level3_width)
			end / 100e,
			asize = isnull(
				nullif(ilr_aims.level3_width, 0e),
				case when isnull(level, 3) >= 3 then w.level3_width end
				) / 50e,
			gsize = isnull(
				nullif(ilr_aims.level2_width, 0e),
				case when isnull(level, 2) >= 2 then w.level2_width end
				) / 20e
		from
			(
			select
				*,
				r = row_number() over (
					partition by
						fft_person_id,
						isnull(ukprn_anon, upin_anon),
						aim_id,
						start_date
					order by
						year desc
					)
			from
				fft.ilr_aims with(nolock)
				outer apply (
					select
						end_date2 = case
							when end_date >= start_date then end_date
							when completion_status > 1 then end_date
						end
					) ed2
			where
				fft_person_id > @id
				and fft_person_id <= @id + @batch_size
				and @min_date <= isnull(end_date2, cast(year as varchar(max))+'-08-31')
				and @max_date >= start_date
				and (
					end_date is not null
					or completion_status <> 3
					)
			) ilr_aims
			outer apply (
			select
				level = coalesce(
					notional_level_v2,
					notional_level_v2_latest,
					nullif(notional_level, 9),
					0)
			) level
			left join fft.qrd on qan collate Latin1_General_BIN = aim_id collate Latin1_General_BIN
			left join @ilr_polyfill w on ilr_aims.aim_id collate Latin1_General_BIN = w.aim_id
			outer apply (
				select
					qual_type,
					btec
				from @lars
				where
					aim_id = ilr_aims.aim_id collate Latin1_General_BIN
					and year = ilr_aims.year
				) lars
		where
			ilr_aims.r = 1
		)
	insert fft.pathways
	select
		fft_person_id,
		max(pupil_matching_reference),
		@date,
		max(case when r=1 and i=1 then upin_anon end),
		max(case when r=1 and i=1 then ukprn_anon end),
		min(type_id),
		isnull(max(case r when 1 then nullif(ssa_tier2, '') end), ''),
		case
			when max(case min_t when type_id then weight end) >= 0.6e * sum(case min_t when type_id then weight end) then 1
			else 0
		end,
		isnull(max(case r when 1 then framework_apprenticeship+0 end), 0),
		isnull(max(case r when 1 then standard_apprenticeship+0 end), 0),
		max(sfl_english+0),
		max(sfl_maths+0),
		max(case when level > 4 then 4 else level end),
		max(case r when 1 then is_completed+0 end),
		max(case r when 1 then is_achieved+0 end),
		isnull(max(case r when 1 then datediff(d, start_date, end_date) + 1 end), 0)
	from (
		select
			*,
			i = row_number() over (partition by fft_person_id order by r)
		from (
			select
				*,
				r = row_number() over (
					partition by fft_person_id
					order by
						type_id,
						level desc,
						is_umbrella desc,
						weight desc,
						is_completed desc,
						end_date desc,
						-- random sort for tie-breakers to remove potential bias
						checksum(newid())
					),
				min_t = min(type_id) over (partition by fft_person_id)
			from
				(
				select
					*,
					a_count = sum(a_level+0) over (partition by fft_person_id),
					l3g_count = count(case when general = 1 and level = 3 then 1 end) over (partition by fft_person_id),
					l2_count = count(case when level = 2 then 1 end) over (partition by fft_person_id),
					asz_sum = sum(case 3 when isnull(level,3) then asize+0 end) over (partition by fft_person_id),
					gsz_sum = sum(case 2 when isnull(level,2) then gsize+0 end) over (partition by fft_person_id)
				
				from
					ilr_aims
				) _
				outer apply (
					select p = case
						when start_date <= @date and end_date >= @date then 0
						when start_date > @date then datediff(d, start_date, @date)
						else datediff(d, end_date, @date)
					end
				) p
				outer apply (
					select type_id = case
						when level > 3 then 1
						when level < 2 then 42
						when framework_apprenticeship | standard_apprenticeship = 1 then case level when 2 then 31 when 3 then 11 end
						when a_count > 2 then 12
						when a_count > 0 and l3g_count > 0 then 16
						when a_count > 1 then 12
						when diploma = 1 then case level when 2 then 33 when 3 then 13 end
						when btec = 1 and level = 3 then 14
						when nvq = 1 then case level when 2 then 34 when 3 then 15 end
						when traineeship = 1 then 32
						when asz_sum >= 1.6e then 17
						when (asz_sum > 0e or level = 3) and (gsz_sum + asz_sum * 2.5e) >= 4e then 20
						when gsz_sum >= 4e then 35
						when l2_count > 0 and level = 3 then 21
						when level = 3 then 22
						when level = 2 then 41
						else 255
					end) x
			)_
		) _
	group by
		fft_person_id
	;

	set @id += @batch_size;
	if @id >= @max_id
	begin
		select top 1
			@date = "date"
		from
			@dates
		where
			"date" > @date
		;
		if @@rowcount = 0
			break;
	end
end
